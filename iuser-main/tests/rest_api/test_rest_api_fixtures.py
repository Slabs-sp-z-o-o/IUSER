import logging
from typing import Any, Callable, Dict, List, Tuple

import pytest
from tests.conftest import Meter, Node
from mysql.connector.cursor import MySQLCursorNamedTuple


@pytest.mark.parametrize('node', [
        None,
        {'active_from': '2020-01-01T00:00'},
        {'active_from': '2020-01-01T00:00', 'location': {'post_code': '31-400'}},
    ],
    indirect=['node'])
def test_node_fixture(node: Node, pa_sql: MySQLCursorNamedTuple):
    """Check if telemetry_info is empty for single, empty node.

    Args:
        node (Node): autogenerated node
        pa_sql (MySQLCursorNamedTuple): SQL db cursor
    """
    logging.info(f'testing {node}')
    pa_sql.execute(f'SELECT COUNT(*) AS count FROM telemetry_info WHERE node_id = {node.id}')
    assert pa_sql.fetchone().count == 0


@pytest.mark.parametrize('meters, items', [
        ([None], 18),
        ([{'gateway_id': 'GWTMP0000100', 'meter_id': '454'}], 18),
        ([{'gateway_id': 'GWTMP0000011', 'meter_id': '1'},
          {'gateway_id': 'GWTMP0000012', 'meter_id': '2'}], 36),
    ],
    indirect=['meters'])
def test_meters_fixture(node: Node, meters: List[Meter], pa_sql: MySQLCursorNamedTuple, items: int):
    """Check telemetry_info for node with meters.

    Args:
        node (Node): autogenerated node
        meters (List[Meter]): signle or multiple meters connected to node
        pa_sql (MySQLCursorNamedTuple): SQL db cursor
        items (int): expected telementry_info rows for tested node
    """
    logging.info(f'testing with {node}')
    for m in meters:
        logging.info(f'testing with {m}')
    pa_sql.execute(f'SELECT * FROM telemetry_info WHERE node_id = {node.id}')
    for r in pa_sql.fetchall():
        logging.debug(r)
    pa_sql.execute(f'SELECT COUNT(*) AS count FROM telemetry_info WHERE node_id = {node.id}')
    assert pa_sql.fetchone().count == items


def pytest_generate_tests(metafunc):
    """Define configuration for specific fixture name."""
    if 'dom_Adama' in metafunc.fixturenames:
        metafunc.parametrize('node', [{'active_from': '1999-01-01T00:00', 'location': {'city': 123}}],
                             indirect=True)
        metafunc.parametrize('meters', [[{'gateway_id': 'GWTMP0000011', 'meter_id': '1'},
                                         {'gateway_id': 'GWTMP0000012', 'meter_id': '2'}]],
                             indirect=True)


@pytest.fixture
def dom_Adama(node, meters) -> Node:
    """Fixture with consolidated predefined node and meters config.

    Returns node only (can be extended to meters too).
    """
    return node


def test_adam_1(dom_Adama):
    """Create test with predefined node + meters config."""
    logging.info(f'testing with {dom_Adama}')


def test_adam_2(dom_Adama):
    """Create test with predefined node + meters config."""
    logging.info(f'testing with {dom_Adama}')


def test_adam_3(set_node: Tuple[Callable[[Dict[str, Any]], Node], Callable[[Dict[str, Any]], Meter]]):
    """Create test using own node + meters config."""
    SCENARIO: Dict[str, Any] = {
        'node': {'active_from': '1999-01-01T00:00', 'location': {'city': 123}},
        'meters': [{'gateway_id': 'GWTMP0000011', 'meter_id': '1'},
                   {'gateway_id': 'GWTMP0000012', 'meter_id': '2'}],
    }
    n = set_node[0](SCENARIO['node'])
    m = [set_node[1](x) for x in SCENARIO['meters']]
    logging.info(f'testing with {n} and {len(m)} meters')


def test_adam_4(set_node: Tuple[Callable[[Dict[str, Any]], Node], Callable[[Dict[str, Any]], Meter]]):
    """Create test with 1 node + 1 meter with default config."""
    SCENARIO: Dict[str, Any] = {
        'node': None,
        'meters': [None],
    }
    n = set_node[0](SCENARIO['node'])
    m = [set_node[1](x) for x in SCENARIO['meters']]
    logging.info(f'testing with {n} and {len(m)} meters')


def test_adam_5(set_node: Tuple[Callable[[Dict[str, Any]], Node], Callable[[Dict[str, Any]], Meter]]):
    """Create test with 1 node + 3 meters with default config."""
    SCENARIO: Dict[str, Any] = {
        'node': {},
        'meters': [{'meter_id': 'x1'}, {'meter_id': 'x2'}, {'meter_id': 'x3'}],
    }
    n = set_node[0](SCENARIO['node'])
    m = [set_node[1](x) for x in SCENARIO['meters']]
    logging.info(f'testing with {n} and {len(m)} meters')
